#!/usr/bin/env bash

chefvm()
{
  if [ -z $1 ]; then
    echo "USAGE: chefvm {use,default,create,edit} CONFIG"
    exit 1
  fi

  command=$1
  shift

  case "$command" in
    "use")
      __chefvm_use $1
      ;;
    "default")
      __chefvm_default $1
      ;;
    "create")
      __chefvm_create $1
      ;;
    "edit")
      __chefvm_edit $1
      ;;
    "list")
      __chefvm_list
      ;;
    "delete")
      __chefvm_delete $1
      ;;
  esac
}

__chefvm_use()
{
  __chefvm_config $1

  if [[ "$1" == "default" ]] && [ ! -f $config_path ]; then
    echo "No default config set"
    return 1
  fi

  rm -f $current_path
  ln -s $config_path $current_path

  echo "Using chef config \"$config\""
}

__chefvm_default()
{
  if [ -z "$1" ]; then
    echo "No config provided."
    return 1
  fi

  __chefvm_config $1

  rm -f $default_path
  ln -s $config $default_path

  echo "Default chef configuration set to: $config"
}

__chefvm_create()
{
  if [ -z "$1" ]; then
    echo "No name provided"
    return 1
  fi

  __chefvm_config $1

  mkdir -p $root_dir/$config_path

  echo "Creating configuration: $config"
  __chefvm_use $config
  echo "Copy your pem file to ~/.chef and run 'knife configure'"
}

__chefvm_delete()
{
  if [ -z "$1" ]; then
    echo "No name provided"
    return 1
  fi

  __chefvm_config $1

  default_config=$(readlink $default_path)
  if [[ "$default_config" == "$config" ]]; then
    rm $default_path
  fi

  current_config=$(readlink $current_path | sed "s/$configurations\///")
  if [[ "$current_config" == "$config" ]]; then
    rm $current_path
  fi

  rm -rf $root_dir/$config_path

  echo "Removed $config"
}

__chefvm_edit() 
{
  if [ -z "$1" ]; then
    echo "No name provided"
    return 1
  fi

  if [ -z "$EDITOR" ]; then
    echo "You must set \$EDITOR"
    return 1
  fi

  __chefvm_config $1

  $EDITOR $root_dir/$config_path
}

__chefvm_list()
{
  __chefvm_config

  config=$(readlink $current_path | sed "s/$configurations\///")
  default_config=$(readlink $default_path)
  for c in $(ls $root_dir/$configurations)
  do
    opts="  "
    if [[ "$c" == "$config" && "$c" == "$default" ]]; then
      opts="*="
    elif [[ "$c" == "$config" ]]; then
      opts="=>"
    elif [[ "$c" == "$default" ]]; then
      opts="* "
    fi

    [[ "$c" != "default" ]] && echo "$opts $c"
  done

  echo
  echo "=> - current"
  echo "=* - current and default"
  echo "*  - default"
}

__chefvm_config()
{
  root_dir="$HOME/.chefvm"
  configurations="configurations"
  config=$1
  config_path="$configurations/$config"
  current_path="$root_dir/current"
  default_path="$root_dir/$configurations/default"
}

__chefvm_setup()
{
  __chefvm_config
  [[ ! -e "$HOME/.chef" ]] && ln -s $current_path $HOME/.chef
}

__chefvm_setup
chefvm use default > /dev/null
