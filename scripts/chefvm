#!/usr/bin/env bash

chefvm()
{
  if [ -z $1 ]; then
    echo "USAGE: chefvm {use,default,create,edit} CONFIG"
  fi

  command=$1
  shift

  case "$command" in
    "use")
      __chefvm_use $1
      ;;
    "default")
      __chefvm_default $1
      ;;
    "create")
      __chefvm_create $1
      ;;
    "edit")
      __chefvm_edit $1
      ;;
    "list")
      __chefvm_list
      ;;
  esac
}

__chefvm_use()
{
  __chefvm_config $1

  if [[ "$1" == "default" ]] && [ ! -f $config_path ]; then
    echo "No default config set"
    return 1
  fi

  rm -f $current_path
  ln -s $config_path $current_path

  echo "Using chef config \"$config\""
}

__chefvm_default()
{
  __chefvm_config $1

  if [ -z "$1" ]; then
    echo "No config provided."
    return 1
  fi

  rm -f $default_path
  ln -s $config $default_path

  echo "Default chef configuration set to: $config"
}

__chefvm_create()
{
  __chefvm_config $1

  if [ -z "$1" ]; then
    echo "No name provided"
    return 1
  fi

  mkdir -p $root_dir/$config_path

  echo "Created configuration: $config"
}

__chefvm_edit()
{
  __chefvm_config $1

  if [ -z "$1" ]; then
    echo "No name provided"
    return 1
  fi

  if [ -z "$EDITOR" ]; then
    echo "You must set \$EDITOR"
    return 1
  fi

  $EDITOR $root_dir/$config_path
}

__chefvm_list()
{
  __chefvm_config
  __chefvm_set_config_from_current
}

__chefvm_set_config_from_current()
{
  config=$(readlink $current_path | sed "s/$configurations\///")
  for c in $(ls $root_dir/$configurations)
  do
    if [[ "$c" == "$config" ]]; then
      echo "* $c"
    else
      echo "  $c"
    fi
  done

  echo "\n* => - current"
}

__chefvm_config()
{
  root_dir="$HOME/.chefvm"
  configurations="configurations"
  config=$1
  config_path="$configurations/$config"
  current_path="$root_dir/current"
  default_path="$root_dir/$configurations/default"
}

__chefvm_setup()
{
  __chefvm_config
  [[ ! -e "$HOME/.chef" ]] && ln -s $current_path $HOME/.chef
}

__chefvm_setup
chefvm use default > /dev/null
